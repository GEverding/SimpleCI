// Generated by CoffeeScript 1.6.3
var App, dashboard, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

dashboard = require('dashboard');

App = (function(_super) {
  __extends(App, _super);

  function App() {
    _ref = App.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  App.prototype.routes = {
    "": "dashboard",
    "dashboard": "dashboard"
  };

  App.prototype.initialize = function(opts) {
    if (opts == null) {
      opts = {};
    }
    this.currentView = {};
    return this.views = {};
  };

  App.prototype.activateTab = function($tab) {
    console.log($tab);
    $tab.addClass("pure-menu-selected");
    return $tab.siblings().removeClass("pure-menu-selected");
  };

  App.prototype.changeView = function(newview) {
    if (this.currentview != null) {
      this.currentview.hide();
    }
    newview.show();
    return this.currentview = newview;
  };

  App.prototype.page = function(opts) {
    var collection, config, view,
      _this = this;
    console.log(opts);
    if (opts != null) {
      config = {
        app: this
      };
      this.activateTab($(opts.tag));
      if (opts.collection != null) {
        config.collection = collection = opts.collection();
        collection.fetch({
          success: function() {
            return collection.trigger('fetched');
          }
        });
      }
      view = this.views[opts.name] = opts.view(config);
      return view.on('navigate', function(place, opt) {
        return _this.navigate(place, opt);
      });
    }
  };

  App.prototype.pages = {
    dashboard: {
      tag: '#dashboardBtn',
      name: 'dashboard',
      collection: function(opts) {
        return new dashboard.collection(null, opts);
      },
      view: function(opts) {
        var DashboardView, view, _ref1;
        DashboardView = dashboard.views.dashboard(opts);
        console.log(DashboardView);
        opts.el = (_ref1 = opts.el) != null ? _ref1 : '#dashboard';
        view = new DashboardView(opts);
        view.render();
        return view;
      }
    }
  };

  App.prototype.dashboard = function() {
    return this.go('dashboard');
  };

  App.prototype.go = function(view) {
    return this.page(this.pages[view]);
  };

  return App;

})(Backbone.Router);

module.exports = App;

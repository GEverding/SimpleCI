// Generated by CoffeeScript 1.6.2
(function() {
  var Build, async, buildJob, path, spawn, yaml;

  yaml = require('libyaml');

  async = require('async');

  spawn = require('child_process').spawn;

  path = require('path');

  Build = require('../models/build');

  buildJob = function(jobs) {
    return jobs.process('build', function(job, done) {
      var cloneFrom, cloneTo, command, data, settings, steps;

      steps = 3;
      data = job.data.body;
      settings = job.data.settings[0];
      console.log(settings.repo);
      cloneFrom = settings.repo + '';
      cloneTo = path.join(settings.workspace, settings.project);
      command = 'clone ' + cloneFrom(+' ' + cloneTo);
      console.log(command);
      return async.series([
        function(cb) {
          var rm;

          rm = spawn('rm', ['-rf', settings.workspace]);
          rm.stdout.on('data', function(data) {
            console.log('rm | out: ', data);
            return job.log('rm | out: %s\n', data);
          });
          rm.stderr.on('data', function(data) {
            console.log('rm | err : ', data);
            return job.log('rm | err: %s\n', data);
          });
          return rm.on('exit', function(code) {
            if (code !== 0) {
              console.log('failed to delete workspace');
              return cb('failed to delete workspace. rm returned: ' + code);
            } else {
              console.log('rm workspace success');
              job.progress(1, steps);
              return cb(null);
            }
          });
        }, function(cb) {
          var git;

          git = spawn('git', ['clone', '--progress', cloneFrom, cloneTo]);
          git.stdout.setEncoding('utf8');
          git.stdout.on('data', function(data) {
            return job.log('%s\n', data);
          });
          git.stderr.setEncoding('utf8');
          git.stderr.on('data', function(data) {
            return job.log('%s\n', data);
          });
          return git.on('exit', function(code) {
            if (code !== 0) {
              return cb(command + ' failed w/ error: ' + code);
            } else {
              console.log('git clone success');
              job.log('finsihed cloning repo');
              job.progress(2, steps);
              return cb(null);
            }
          });
        }, function(cb) {
          var install;

          install = spawn('npm', ['install'], {
            cwd: cloneTo
          });
          install.stdout.setEncoding('utf8');
          install.stdout.on('data', function(data) {
            return job.log('%s\n', data);
          });
          install.stderr.setEncoding('utf8');
          install.stderr.on('data', function(data) {
            return job.log('%s\n', data);
          });
          return install.on('exit', function(code) {
            if (code !== 0) {
              return cb(command + ' failed w/ error: ' + code);
            } else {
              console.log('npm install success');
              job.log('finished node install modules');
              job.progress(3, steps);
              return cb(null);
            }
          });
        }
      ], function(err, res) {
        if (err) {
          done(err);
        }
        return done();
      });
    });
  };

  module.exports = buildJob;

}).call(this);

/*
//@ sourceMappingURL=build.map
*/
